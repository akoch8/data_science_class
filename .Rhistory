#
# This is an R script that will introduce you to some of the basics of
# the R programming language.
# Each line of the text you are reading right now is preceded by a "#",
# which makes them what we call "comments". These are lines of code that
# are not executed when you run your program. You can (and should!) use
# them to explain your code.
#
# Let's start writing some code that does something!
# If you want, you can use R as a simple calculator:
1 + 2
1+3
1 + 2
2 ^ 2
2 ** 3
16 ^ 0.5
sqrt(16)
?sqrt
2 / 0
16 %% 3
15 %% 3
x = 1 + 2
x
x = 5
x
x = 'This is a string'
x
x * 2
x = FALSE
x
2 > 6
'a' == 'a'
x = factor(c('a', 'a', 'b', 'c', 'c', 'c', 'c'))
x
x = c(1, 2, 3, 4, 5)
x
x[2]
x[6]
x = rnorm(10)
x = rnorm(10)
x
?rnorm
length(x)
mean(x)
median(x)
max(x)
min(x)
summary(x)
x[2:7]
x[11]
x + 2
x = data.frame(a = c(1, 2, 3), b = c('a', 'b', 'c'), stringsAsFactors=F)
x
View(x)
dim(x)
nrow(x)
ncol(x)
x[1,]
x[,1]
x[1,1]
str(x)
colnames(x)
colnames(x) = c('column_1', 'column_2')
x
x$column_1
x = list(a = c(1, 2, 3), b = c('a', 'b', 'c'))
x
x[[1]]
x[['a']]
triple = function(x) {
return(x * 3)
}
triple(2)
# An important programming concept is the conditional statement. These allow
# us to perform different actions depending on whether a certain condition
# is true or false.
x = 4
if (x > 3) {
message('x is greater than 3')
}
# An important programming concept is the conditional statement. These allow
# us to perform different actions depending on whether a certain condition
# is true or false.
x = 1
if (x > 3) {
message('x is greater than 3')
}
x > 3
x = 3
if (x < 3) {
message('x is smaller than 3')
} else {
message('x is greater than 3')
}
if (x < 3) {
message('x is smaller than 3')
} else if (x == 3) {
message('x is equal to 3')
} else {
message('x is greater than 3')
}
1:5
for (i in 1:5) {
message(paste0('i = ', i))
}
x = data.frame(a = c(1, 2, 3), b = c('a', 'b', 'c'), stringsAsFactors=F)
for (i in 1:nrow(x)) {
message(paste0('row ', i, ': ', paste(x[i,], collapse=', ')))
}
i = 0
while (i < 5) {
i = i + 1
message(paste0('i = ', i))
}
?iris
data(iris)
x = iris$Petal.Length
View(triple)
View(iris)
y = iris$Petal.Width
plot(x, y)
plot(x, y, bty='n', pch=20, col='orange')
?plot
plot(x, y, bty='n', pch=20, col='orange')
abline(lm(y ~ x), col='cornflowerblue', lwd=2, lty=2)
lines(lowess(x, y, f=0.5), col='cornflowerblue', lwd=2, lty=3)
table(iris$Species)
pointColors = as.character(iris$Species)
pointColors
pointColors[pointColors == 'setosa'] = '#a8e6cf'
pointColors[pointColors == 'versicolor'] = '#fdffab'
pointColors[pointColors == 'virginica'] = '#ffd3b6'
pointColors
plot(x, y, bty='n', pch=20, col=pointColors, xlab='Petal length', ylab='Petal width')
legend('topleft', levels(iris$Species), col=c('#a8e6cf', '#fdffab', '#ffd3b6'), pch=20, bty='n')
boxplot(iris$Sepal.Length ~ iris$Species, ylab='Sepal length', frame.plot=F, outline=F)
pairs(~., data=iris[,-ncol(iris)])
pairs(~., data=iris[,-ncol(iris)], pch=20, col=pointColors)
###
### A brief introduction to
### DATA SCIENCE
###
### Example analysis in R:
### Compare the overall survival between the different tumor stages.
###
### Alexander Koch
### 2019
###
setwd('~/Documents/postdoc/dataScienceClass/')
library(data.table)
library(survival)
# Load and process the phenotype and survival data that we downloaded from TCGA.
p = fread('data/TCGA-COAD.GDC_phenotype.tsv', data.table=F)
dim(p)
head(p)
table(p$sample_type.samples)
# Select only the primary tumor samples.
p = p[which(p$sample_type.samples == 'Primary Tumor'),]
dim(p)
table(p$tumor_stage.diagnoses)
p = p[,c('submitter_id', 'tumor_stage.diagnoses')]
colnames(p) = c('patient', 'stage')
p$stage[grepl('iv', p$stage)] = 'stage 4'
p$stage[grepl('iii', p$stage)] = 'stage 3'
p$stage[grepl('ii', p$stage)] = 'stage 2'
p$stage[grepl('i', p$stage)] = 'stage 1'
p$stage[!grepl('stage', p$stage)] = NA
s = fread('data/TCGA-COAD.survival.tsv', data.table=F)
dim(s)
head(s)
s = s[,c('_PATIENT', '_EVENT', '_TIME_TO_EVENT')]
colnames(s) = c('patient', 'event', 'time')
# Combine the selected phenotype and survival data into a single table.
data = merge(p, s)
dim(data)
head(data)
# Create the survival curves for the four different tumor stages.
fit = survfit(Surv(time, event) ~ stage, data=data)
r = survdiff(Surv(time, event) ~ stage, data=data)
pvalue = pchisq(r$chisq, 3, lower.tail=F)
pvalue
stageColors = c('#f6d2a9', '#f19c7c', '#dd686c', '#b13f64')
plot(fit, lty=1, col=stageColors, frame.plot=F, lwd=2, xlab='Years', ylab='Survival', mark=-0x00D7L, xaxt='n', yaxt='n', xlim=c(0, 15 * 365))
axis(1, at=seq(0, 15 * 365, by=5 * 365), labels=seq(0, 15, by=5), col='#2f2f2f', col.axis='#2f2f2f')
axis(2, at=seq(0, 1, by=0.2), col='#2f2f2f', col.axis='#2f2f2f', las=1)
text(15 * 365 / 2, 1, paste0('p = ', sprintf('%3.2e', pvalue)), adj=c(0.5, 0.5), col='#2f2f2f')
legend('topright', c('stage 1', 'stage 2', 'stage 3', 'stage 4'), col=stageColors, lty=1, lwd=2, bty='n', text.col='#2f2f2f')
###
### A brief introduction to
### DATA SCIENCE
###
### Example analysis in R:
### Differential expression analysis of TP53 between clear cell renal cell
### carcinoma and normal cortex.
###
### Alexander Koch
### 2019
###
setwd('~/Documents/postdoc/dataScienceClass/')
library(data.table)
# Load the GEO gene expression data, skipping the annotation rows at the beginning.
data = fread('data/GDS4282.soft', skip=318, data.table=F)
dim(data)
head(data)
hist(as.matrix(data[,-c(1, 2)]), col='orange', border=NA, main='Gene expression histogram')
plot(density(as.matrix(data[,-c(1, 2)])), bty='n', lwd=2, col='orange', main='Gene expression density plot')
# Load the GEO data annotation data from the start of the file.
annotation = fread('data/GDS4282.soft', nrows=318, data.table=F, sep='\n')
annotation = annotation[,1]
length(annotation)
annotation[1]
# Extract the names of the normal and the tumor samples.
tumorSamples = grep('Gene expression profiling of clear-cell renal cell carcinoma', annotation, value=T)
tumorPatients = tumorSamples
tumorPatients = sub('^.+ patient ', '', tumorPatients)
tumorSamples = sub(' = .+$', '', tumorSamples)
tumorSamples = sub('#', '', tumorSamples)
tumor = data.frame(cbind(tumorSamples, tumorPatients), stringsAsFactors=F)
colnames(tumor) = c('tumor_sample', 'patient')
head(tumor)
normalSamples = grep('Gene expression profiling of normal cortex', annotation, value=T)
normalPatients = normalSamples
normalPatients = sub('^.+ patient ', '', normalPatients)
normalSamples = sub(' = .+$', '', normalSamples)
normalSamples = sub('#', '', normalSamples)
normal = data.frame(cbind(normalSamples, normalPatients), stringsAsFactors=F)
colnames(normal) = c('normal_sample', 'patient')
head(normal)
# Check if the normal and tumor patient IDs overlap.
length(normalPatients[!normalPatients %in% tumorPatients])
# Combine the normal and tumor sample names and patient IDs in a single data frame.
samples = merge(normal, tumor)
head(samples)
# Only keep the samples from the expression data that are in our list of normal and
# tumor samples.
data = data[,c('ID_REF', 'IDENTIFIER', samples$normal_sample, samples$tumor_sample)]
# Is there a difference in gene expression between normal and tumor samples for
# the gene TP53?
'TP53' %in% data$IDENTIFIER
data[which(data$IDENTIFIER == 'TP53'),]
# There are two probes for TP53 on the gene expression array, so we will have to
# combine the expression data from both probes in a single measurement. We can do this
# by taking the mean of both measurements.
tp53 = colMeans(data[which(data$IDENTIFIER == 'TP53'),-c(1, 2)])
# Check if the expression data is normally distributed. If it is, we can use the
# t-test to test the difference between normal and tumor samples. If not, we have
# to use a non-parametric test such as the Mann-Whitney test (also known as the
# Wilcoxon rank-sum test).
hist(tp53)
hist(tp53, col='orange', border=NA, xlab='TP53 expression')
plot(density(tp53))
plot(density(tp53), bty='n', lwd=3, col='orange', main='', xlab='TP53 expression')
shapiro.test(tp53)
qqnorm(tp53)
qqnorm(tp53, bty='n', pch=20, col='grey')
qqline(tp53, lwd=2, col='#5555ee')
# It looks like the data are not normally distributed, so we'll use the Wilcoxon
# rank-sum test. Given that each patient provided a normal and a tumor sample, we
# will perform a paired test.
testResult = wilcox.test(tp53[samples$normal_sample], tp53[samples$tumor_sample], paired=T)
testResult
# Plot the data.
textColor = '#2f2f2f'
subColor = '#6f6f6f'
normalColor = '#7fbf7b'
tumorColor = '#af8dc3'
boxplot(tp53[samples$normal_sample], tp53[samples$tumor_sample])
par(mar=c(3, 4, 4, 1))
boxplot(tp53[samples$normal_sample], tp53[samples$tumor_sample], outline=F, boxwex=0.4, frame.plot=F, yaxt='n', xaxt='n', ylim=c(floor(min(tp53)), ceiling(max(tp53))))
points(jitter(rep(1, nrow(samples)), amount=0.15), tp53[samples$normal_sample], pch=19, col=normalColor)
points(jitter(rep(2, nrow(samples)), amount=0.15), tp53[samples$tumor_sample], pch=19, col=tumorColor)
mtext('TP53 expression', side=3, line=2, at=0.5, adj=0, cex=1, col=textColor, font=2)
mtext('TP53 is higher expressed in ccRCC samples than in normal samples', side=3, line=1, at=0.5, adj=0, cex=0.8, col=subColor)
mtext(paste0('(Wilcoxon rank-sum test, p = ', round(testResult$p.value, digits=5), ')'), side=3, line=0, at=0.5, adj=0, cex=0.8, col=subColor)
axis(1, at=c(1, 2), labels=c('Normal', 'Tumor'), lwd=0, col.axis=textColor, font=2)
axis(2, at=seq(floor(min(tp53)), ceiling(max(tp53)), 1), lwd=0.5, col=textColor, col.axis=textColor, las=1)
title(ylab='TP53 expression', col.lab=textColor, font.lab=2)
